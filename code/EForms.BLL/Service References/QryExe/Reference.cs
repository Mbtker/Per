//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Performance.Management.BLL.QryExe {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QryExe.IQryExe")]
    public interface IQryExe {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQryExe/ExecuteSelectSQL", ReplyAction="http://tempuri.org/IQryExe/ExecuteSelectSQLResponse")]
        System.Data.DataSet ExecuteSelectSQL(string UserName, string Password, string DataBase, string Command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQryExe/ExecuteSelectSQL", ReplyAction="http://tempuri.org/IQryExe/ExecuteSelectSQLResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ExecuteSelectSQLAsync(string UserName, string Password, string DataBase, string Command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQryExe/ExecuteNonQuerySQL", ReplyAction="http://tempuri.org/IQryExe/ExecuteNonQuerySQLResponse")]
        bool ExecuteNonQuerySQL(string UserName, string Password, string DataBase, string Command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQryExe/ExecuteNonQuerySQL", ReplyAction="http://tempuri.org/IQryExe/ExecuteNonQuerySQLResponse")]
        System.Threading.Tasks.Task<bool> ExecuteNonQuerySQLAsync(string UserName, string Password, string DataBase, string Command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQryExe/ExecuteScalarSQL", ReplyAction="http://tempuri.org/IQryExe/ExecuteScalarSQLResponse")]
        int ExecuteScalarSQL(string UserName, string Password, string DataBase, string Command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQryExe/ExecuteScalarSQL", ReplyAction="http://tempuri.org/IQryExe/ExecuteScalarSQLResponse")]
        System.Threading.Tasks.Task<int> ExecuteScalarSQLAsync(string UserName, string Password, string DataBase, string Command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQryExe/ExecuteGetValueSQL", ReplyAction="http://tempuri.org/IQryExe/ExecuteGetValueSQLResponse")]
        string ExecuteGetValueSQL(string UserName, string Password, string DataBase, string Command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQryExe/ExecuteGetValueSQL", ReplyAction="http://tempuri.org/IQryExe/ExecuteGetValueSQLResponse")]
        System.Threading.Tasks.Task<string> ExecuteGetValueSQLAsync(string UserName, string Password, string DataBase, string Command);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQryExeChannel : Performance.Management.BLL.QryExe.IQryExe, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QryExeClient : System.ServiceModel.ClientBase<Performance.Management.BLL.QryExe.IQryExe>, Performance.Management.BLL.QryExe.IQryExe {
        
        public QryExeClient() {
        }
        
        public QryExeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QryExeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QryExeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QryExeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet ExecuteSelectSQL(string UserName, string Password, string DataBase, string Command) {
            return base.Channel.ExecuteSelectSQL(UserName, Password, DataBase, Command);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ExecuteSelectSQLAsync(string UserName, string Password, string DataBase, string Command) {
            return base.Channel.ExecuteSelectSQLAsync(UserName, Password, DataBase, Command);
        }
        
        public bool ExecuteNonQuerySQL(string UserName, string Password, string DataBase, string Command) {
            return base.Channel.ExecuteNonQuerySQL(UserName, Password, DataBase, Command);
        }
        
        public System.Threading.Tasks.Task<bool> ExecuteNonQuerySQLAsync(string UserName, string Password, string DataBase, string Command) {
            return base.Channel.ExecuteNonQuerySQLAsync(UserName, Password, DataBase, Command);
        }
        
        public int ExecuteScalarSQL(string UserName, string Password, string DataBase, string Command) {
            return base.Channel.ExecuteScalarSQL(UserName, Password, DataBase, Command);
        }
        
        public System.Threading.Tasks.Task<int> ExecuteScalarSQLAsync(string UserName, string Password, string DataBase, string Command) {
            return base.Channel.ExecuteScalarSQLAsync(UserName, Password, DataBase, Command);
        }
        
        public string ExecuteGetValueSQL(string UserName, string Password, string DataBase, string Command) {
            return base.Channel.ExecuteGetValueSQL(UserName, Password, DataBase, Command);
        }
        
        public System.Threading.Tasks.Task<string> ExecuteGetValueSQLAsync(string UserName, string Password, string DataBase, string Command) {
            return base.Channel.ExecuteGetValueSQLAsync(UserName, Password, DataBase, Command);
        }
    }
}
